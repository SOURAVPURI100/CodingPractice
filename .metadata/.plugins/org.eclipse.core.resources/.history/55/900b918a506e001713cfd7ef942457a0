import java.io.*;
import java.util.regex.*;

public class GeneralObligations {
	
	 
	 static Pattern pYear = Pattern.compile("[0-9][0-9][0-9][0-9]");
	 static Matcher mYear = null;
	public static void main(String[] args) {
		 File file = new File("/home/sourav/Documents/Finance/library/1982JulDec.txt");
		 try{
		 BufferedReader in = new BufferedReader(new FileReader(file));
		 String line = "", first_word = "";
		 String[] columns;
		 Pattern p = Pattern.compile("[0-9]+/[0-9]+");
		 boolean isUnderReview = false;
		 boolean noYearValue = false;
//		 
//		 String date= "", time="", sale ="", rating="", amount="", issue="", pop="", 
//				 net="", comment="";
		 int count =1;
		 
		 // Create Data object
		 Data data = new Data();
		 BuildExcel buildExcel = new BuildExcel("/home/sourav/Documents/Finance/library/1982JulDec.xlsx"); 
		 File_Reading obj = null;
		 while((line = in.readLine()) != null){
			  
			 line = line.trim();
			 
			 // Check if this a first line for next column
			 if(line.length() > 0){	 
				 first_word = firstWord(line);
			 }
			 else{
				 continue;
			 }
			 Matcher m = p.matcher(first_word);
			 
			 if(m.find() && count > 1){
				 count = 1;	 			 
				 buildExcel.addRow(data);
				 data = new Data();		 
				 isUnderReview = false;
				 noYearValue = false;
			 }
			 
			 if(count == 1){	 
				 // in the first line of new row check for "Under Review"
				 isUnderReview = checkUnderReview(line);
				// Check for yearly value
				 if(isUnderReview == false){
					 noYearValue = checkYearValue(line);
				 }
				 
				 fillFirstLineData(data, line, isUnderReview, noYearValue); 
				 
//				 data.date = columns[0];
//				 if(columns.length > 1)
//					 data.rating = columns[1];
			 }
			 else if (count == 2){
				 data.time = columns[0];
				 
				 if(columns.length > 1)
					 data.amount = data.amount + columns[1];
			 }
			 else if (count == 3){
				 data.sale = columns[0];
				 if(columns.length > 1)
					 data.amount = data.amount + columns[1];
			 }
			 if(columns.length > 2){
				 data.issue = data.issue + columns[2]+"\n";
			 }
			 
			 if(columns.length > 3){
				 fillPopulationData(data, count, columns[3]);
//				 data.pop = data.pop + columns[3]+"\n";
			 } 
			 if(columns.length > 4){
				 fillDebtData(data, count, columns[4]);
//				 data.net = data.net + columns[4]+"\n";
			 } 
			 
			 if(columns.length > 5){
				 data.comment = eliminateSymbol(data.comment) + columns[5]+"\n";
			 } 
			 	 
			 count++;
			 
		 }
		 in.close();
		 
		 buildExcel.addRow(data);
		 buildExcel.generateOutput();

		 System.out.println("File Generated");	 
		 }
		 
		 catch(Exception e){
			 e.printStackTrace();
		 }

	}
	
	public static String formed_line(String line, int beg, int end){
		
		if(line.length() >= end)
			return line.substring(beg, end);
		else if(line.length() > beg)
			return line.substring(beg);
		else
			return "";
		
	}
	
	public static String[] trimValues(String[] columns){
		String [] retColumns = new String[columns.length];
		
		for(int i=0; i<columns.length; i++){
			retColumns[i] = columns[i].trim();
		}
		
		return retColumns;
	}
	// Fill Population Assess value into corresponding columns
	public static void fillPopulationData(Data data, int line, String value){
		if(line == 1){
			data.pop1 = eliminateSymbol(value);		
		}
		else if(line == 2){
			data.pop2 = eliminateSymbol(value);	
			
		}
		else if(line == 3){
			data.assessVal1 = eliminateSymbol(value);	
			
		}
		else if(line == 4){
			data.assessVal2= eliminateSymbol(value);	
			
		}
		else if(line == 5){
			data.market_perc= eliminateSymbol(value);	
			
		}
	}
	
	// Fill Net and Overall Debt data into corresponding columns
	public static void fillDebtData(Data data, int line, String value){
		if(line == 1){
			data.netDir1 = eliminateSymbol(value);	
		}
		else if(line == 2){
			data.overallDebt = eliminateSymbol(value);	
			
		}
		else if(line == 3){
			data.overallPC = eliminateSymbol(value);	
			
		}
		else if(line == 4){
			data.overallAV= eliminateSymbol(value);	
			
		}
		else if(line == 5){
			data.overallMV= eliminateSymbol(value);	
			
		}
	}
	
	public static boolean verifyColumnData(String[] columns){
		for(String s: columns){
			if(!s.equals("") && !s.matches("[@]+"))
				return true;
		}
		return false;
	}
	
	public static String eliminateSymbol(String str){
		return str.replaceAll("[@][@]", "");
	}
	
	public static String firstWord(String line){
		String firstWord = "";
		
		for(char c: line.toCharArray()){
			if(c == ' ')
				break;
			firstWord += c;
		}
		return firstWord;
	}
	
	public static boolean checkUnderReview(String line){
		if(line.contains("Under Review") || line.contains("under review"))
			return true;
		return false;
		
	}
	
	public static boolean checkYearValue(String line){
		mYear = pYear.matcher(line);
		if(mYear.find())
			return false;
		return true;
		
	}
	
	public static void fillFirstLineData(Data data, String line, boolean isUnderReview, boolean noYearValue){
		
		int i =0, count = 0;
		String rating = "";
		// Fill date value 
		while(i < line.length()){
			if(line.charAt(i) == ' ')
				break;
			data.date += line.charAt(i);
			i++;
		}
		// Look for rating value
		while(i < line.length()){
			if(line.charAt(i) != ' ')
				break;	
			i++;
		}
		// Fill could be rating value upto 7 characters
		while(i < line.length() && count < 7){
			rating += line.charAt(i);
			count++;
			i++;
		}
		rating = rating.trim();
		// Check if valid rating 
		if(rating.equals("A 1") || rating.equals("Baa 1") || rating.equals("Aa")
			|| rating.equals("A") || rating.equals("#") || rating.equals("*")
			|| rating.equals("Baa") || rating.equals("Con.(A)")|| rating.equals("Aa 1")
			|| rating.equals("Aaa") || rating.equals("As")){
			data.rating = rating;
			
		}
		else{
			// Backtrack index "i" if rating not found
			i = i -7;
			
		}
		
		// Look for issuer value
		while(i < line.length()){
			if(line.charAt(i) != ' ')
				break;	
			i++;
		}
		
		if(!isUnderReview && !noYearValue){
			fillIssuerOtherData(line, i, data);
		}
		
		
		
		
	}
	
	public static void fillIssuerOtherData(String line, int i, Data data){
		int j = 0;
		mYear = pYear.matcher(line);
		if(mYear.find()){
		   j = mYear.start();
		}
		
		data.issue = data.issue + line.substring(i, j);
		i =j;
		
		while(i < line.length()){
			
		}
	}

}

